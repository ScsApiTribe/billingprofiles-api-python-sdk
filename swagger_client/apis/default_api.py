# coding: utf-8

"""
    Billing Profiles

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class DefaultApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def g_et_billingprofiles(self, best_for_payment, scs_version, **kwargs):
        """
        
        #### Search Billing Profiles #### Searches for billing profiles owned by the Swisscom customer identifier provided or contained in access token. At present, only searching for a customer's best billing profile to be used for payment is supported. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.g_et_billingprofiles(best_for_payment, scs_version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool best_for_payment: Determines whether to return only the identified best billing profile of the provided customer identifier. The best billing profile is always eligible for use with the Payments API and is owned by the customer specified. Currently, only the value \"true\" is supported.  (required)
        :param str scs_version: The version of the API, value must be \"**<<SCS-Version>>**\".  This header indicates which version of the API should serve the request. If the value of the header is missing or it indicates a wrong version, the API returns an error message.  (required)
        :param float customer_id: The Swisscom customer identifier that uniquely identifies a customer. Performing the request with this query parameter returns the list of billing profiles owned by the Swisscom customer identifier provided. It is mandatory when using the client credentials grant. 
        :param str scs_request_id: The request ID.  It is used by the API to trace the fulfillment of a request. The API user may provide its own request ID or can accept the request ID generated by the API. In both cases the request ID is returned in the header of the response.  This ID should be refered by the API users in their communication with Swisscom whenever requesting details about the execution of a request. 
        :return: BillingProfilesCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.g_et_billingprofiles_with_http_info(best_for_payment, scs_version, **kwargs)
        else:
            (data) = self.g_et_billingprofiles_with_http_info(best_for_payment, scs_version, **kwargs)
            return data

    def g_et_billingprofiles_with_http_info(self, best_for_payment, scs_version, **kwargs):
        """
        
        #### Search Billing Profiles #### Searches for billing profiles owned by the Swisscom customer identifier provided or contained in access token. At present, only searching for a customer's best billing profile to be used for payment is supported. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.g_et_billingprofiles_with_http_info(best_for_payment, scs_version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param bool best_for_payment: Determines whether to return only the identified best billing profile of the provided customer identifier. The best billing profile is always eligible for use with the Payments API and is owned by the customer specified. Currently, only the value \"true\" is supported.  (required)
        :param str scs_version: The version of the API, value must be \"**<<SCS-Version>>**\".  This header indicates which version of the API should serve the request. If the value of the header is missing or it indicates a wrong version, the API returns an error message.  (required)
        :param float customer_id: The Swisscom customer identifier that uniquely identifies a customer. Performing the request with this query parameter returns the list of billing profiles owned by the Swisscom customer identifier provided. It is mandatory when using the client credentials grant. 
        :param str scs_request_id: The request ID.  It is used by the API to trace the fulfillment of a request. The API user may provide its own request ID or can accept the request ID generated by the API. In both cases the request ID is returned in the header of the response.  This ID should be refered by the API users in their communication with Swisscom whenever requesting details about the execution of a request. 
        :return: BillingProfilesCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['best_for_payment', 'scs_version', 'customer_id', 'scs_request_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_et_billingprofiles" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'best_for_payment' is set
        if ('best_for_payment' not in params) or (params['best_for_payment'] is None):
            raise ValueError("Missing the required parameter `best_for_payment` when calling `g_et_billingprofiles`")
        # verify the required parameter 'scs_version' is set
        if ('scs_version' not in params) or (params['scs_version'] is None):
            raise ValueError("Missing the required parameter `scs_version` when calling `g_et_billingprofiles`")

        resource_path = '/billingprofiles'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'customer_id' in params:
            query_params['customerId'] = params['customer_id']
        if 'best_for_payment' in params:
            query_params['bestForPayment'] = params['best_for_payment']

        header_params = {}
        if 'scs_request_id' in params:
            header_params['SCS-Request-ID'] = params['scs_request_id']
        if 'scs_version' in params:
            header_params['SCS-Version'] = params['scs_version']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth_2_0_client_credentials']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='BillingProfilesCollection',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def g_et_billingprofiles_billing_profile_id(self, billing_profile_id, scs_version, **kwargs):
        """
        
        #### Returns Billing Profile Information #### Allows to retrieve the details of the billing profile represented by the billing profile identifier provided as parameter. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.g_et_billingprofiles_billing_profile_id(billing_profile_id, scs_version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str billing_profile_id: The unique identifier used to identify a billing profile.  When using access tokens generated with Authorization Code grant, the request parameter must be \"me\" and the billingProfileId is extracted from the access token.  The value of the URI parameter must not contain spaces and should be URL encoded.  (required)
        :param str scs_version: The version of the API, value must be \"**<<SCS-Version>>**\".  This header indicates which version of the API should serve the request. If the value of the header is missing or it indicates a wrong version, the API returns an error message.  (required)
        :param str scs_request_id: The request ID.  It is used by the API to trace the fulfillment of a request. The API user may provide its own request ID or can accept the request ID generated by the API. In both cases the request ID is returned in the header of the response.  This ID should be refered by the API users in their communication with Swisscom whenever requesting details about the execution of a request. 
        :return: BillingProfileDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.g_et_billingprofiles_billing_profile_id_with_http_info(billing_profile_id, scs_version, **kwargs)
        else:
            (data) = self.g_et_billingprofiles_billing_profile_id_with_http_info(billing_profile_id, scs_version, **kwargs)
            return data

    def g_et_billingprofiles_billing_profile_id_with_http_info(self, billing_profile_id, scs_version, **kwargs):
        """
        
        #### Returns Billing Profile Information #### Allows to retrieve the details of the billing profile represented by the billing profile identifier provided as parameter. 

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.g_et_billingprofiles_billing_profile_id_with_http_info(billing_profile_id, scs_version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str billing_profile_id: The unique identifier used to identify a billing profile.  When using access tokens generated with Authorization Code grant, the request parameter must be \"me\" and the billingProfileId is extracted from the access token.  The value of the URI parameter must not contain spaces and should be URL encoded.  (required)
        :param str scs_version: The version of the API, value must be \"**<<SCS-Version>>**\".  This header indicates which version of the API should serve the request. If the value of the header is missing or it indicates a wrong version, the API returns an error message.  (required)
        :param str scs_request_id: The request ID.  It is used by the API to trace the fulfillment of a request. The API user may provide its own request ID or can accept the request ID generated by the API. In both cases the request ID is returned in the header of the response.  This ID should be refered by the API users in their communication with Swisscom whenever requesting details about the execution of a request. 
        :return: BillingProfileDetails
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['billing_profile_id', 'scs_version', 'scs_request_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_et_billingprofiles_billing_profile_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'billing_profile_id' is set
        if ('billing_profile_id' not in params) or (params['billing_profile_id'] is None):
            raise ValueError("Missing the required parameter `billing_profile_id` when calling `g_et_billingprofiles_billing_profile_id`")
        # verify the required parameter 'scs_version' is set
        if ('scs_version' not in params) or (params['scs_version'] is None):
            raise ValueError("Missing the required parameter `scs_version` when calling `g_et_billingprofiles_billing_profile_id`")

        resource_path = '/billingprofiles/{billingProfileId}'.replace('{format}', 'json')
        path_params = {}
        if 'billing_profile_id' in params:
            path_params['billingProfileId'] = params['billing_profile_id']

        query_params = {}

        header_params = {}
        if 'scs_request_id' in params:
            header_params['SCS-Request-ID'] = params['scs_request_id']
        if 'scs_version' in params:
            header_params['SCS-Version'] = params['scs_version']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth_2_0_client_credentials', 'oauth_2_0_authorization_code']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='BillingProfileDetails',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))

    def g_et_billingprofiles_billing_profile_id_eligibility(self, billing_profile_id, scs_version, **kwargs):
        """
        
        #### Returns Billing Profile Eligibility #### This API provides the capability to verify the eligibility of a billing profile.  Before submitting the payment transactions using the Payments API, an API-Consumer can check if a specific billing profile is eligible  for making the payment transactions.  The eligibility is determined by considering various factors. Some of the reasons for the billing profile to be non-eligible are * credit has been reached * has been barred * has no paid invoices * does not have any active subscriptions * is not found in the Swisscom billing systems * is not active  This API additionally provides the capability to execute specific eligibility checks.  If only some certain eligiblity checks shall be executed, then a list of desired eligibility checks has to be provided.   If no specific eligibility checks are provided by the API-consumer, then some default checks are executed, depending to  the specific configuration of each API-Consumer.  

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.g_et_billingprofiles_billing_profile_id_eligibility(billing_profile_id, scs_version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str billing_profile_id: The unique identifier used to identify a billing profile.  When using access tokens generated with Authorization Code grant, the request parameter must be \"me\" and the billingProfileId is extracted from the access token.  The value of the URI parameter must not contain spaces and should be URL encoded.  (required)
        :param str scs_version: The version of the API, value must be \"**<<SCS-Version>>**\".  This header indicates which version of the API should serve the request. If the value of the header is missing or it indicates a wrong version, the API returns an error message.  (required)
        :param float customer_id: The Swisscom customer identifier that uniquely identifies a customer.   It is only required for certain eligibilty checks and only when using access tokens generated with Client Credentials grant.  Which eligibility checks are executed, are depending to the configuration of each API-Consumer.  When using access tokens generated with Authorization Code grant, the customerId is extracted from the access token. 
        :param str scs_request_id: The request ID.  It is used by the API to trace the fulfillment of a request. The API user may provide its own request ID or can accept the request ID generated by the API. In both cases the request ID is returned in the header of the response.  This ID should be refered by the API users in their communication with Swisscom whenever requesting details about the execution of a request. 
        :return: BillingProfileEligibility
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.g_et_billingprofiles_billing_profile_id_eligibility_with_http_info(billing_profile_id, scs_version, **kwargs)
        else:
            (data) = self.g_et_billingprofiles_billing_profile_id_eligibility_with_http_info(billing_profile_id, scs_version, **kwargs)
            return data

    def g_et_billingprofiles_billing_profile_id_eligibility_with_http_info(self, billing_profile_id, scs_version, **kwargs):
        """
        
        #### Returns Billing Profile Eligibility #### This API provides the capability to verify the eligibility of a billing profile.  Before submitting the payment transactions using the Payments API, an API-Consumer can check if a specific billing profile is eligible  for making the payment transactions.  The eligibility is determined by considering various factors. Some of the reasons for the billing profile to be non-eligible are * credit has been reached * has been barred * has no paid invoices * does not have any active subscriptions * is not found in the Swisscom billing systems * is not active  This API additionally provides the capability to execute specific eligibility checks.  If only some certain eligiblity checks shall be executed, then a list of desired eligibility checks has to be provided.   If no specific eligibility checks are provided by the API-consumer, then some default checks are executed, depending to  the specific configuration of each API-Consumer.  

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.g_et_billingprofiles_billing_profile_id_eligibility_with_http_info(billing_profile_id, scs_version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str billing_profile_id: The unique identifier used to identify a billing profile.  When using access tokens generated with Authorization Code grant, the request parameter must be \"me\" and the billingProfileId is extracted from the access token.  The value of the URI parameter must not contain spaces and should be URL encoded.  (required)
        :param str scs_version: The version of the API, value must be \"**<<SCS-Version>>**\".  This header indicates which version of the API should serve the request. If the value of the header is missing or it indicates a wrong version, the API returns an error message.  (required)
        :param float customer_id: The Swisscom customer identifier that uniquely identifies a customer.   It is only required for certain eligibilty checks and only when using access tokens generated with Client Credentials grant.  Which eligibility checks are executed, are depending to the configuration of each API-Consumer.  When using access tokens generated with Authorization Code grant, the customerId is extracted from the access token. 
        :param str scs_request_id: The request ID.  It is used by the API to trace the fulfillment of a request. The API user may provide its own request ID or can accept the request ID generated by the API. In both cases the request ID is returned in the header of the response.  This ID should be refered by the API users in their communication with Swisscom whenever requesting details about the execution of a request. 
        :return: BillingProfileEligibility
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['billing_profile_id', 'scs_version', 'customer_id', 'scs_request_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method g_et_billingprofiles_billing_profile_id_eligibility" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'billing_profile_id' is set
        if ('billing_profile_id' not in params) or (params['billing_profile_id'] is None):
            raise ValueError("Missing the required parameter `billing_profile_id` when calling `g_et_billingprofiles_billing_profile_id_eligibility`")
        # verify the required parameter 'scs_version' is set
        if ('scs_version' not in params) or (params['scs_version'] is None):
            raise ValueError("Missing the required parameter `scs_version` when calling `g_et_billingprofiles_billing_profile_id_eligibility`")

        resource_path = '/billingprofiles/{billingProfileId}/eligibility'.replace('{format}', 'json')
        path_params = {}
        if 'billing_profile_id' in params:
            path_params['billingProfileId'] = params['billing_profile_id']

        query_params = {}
        if 'customer_id' in params:
            query_params['customerId'] = params['customer_id']

        header_params = {}
        if 'scs_request_id' in params:
            header_params['SCS-Request-ID'] = params['scs_request_id']
        if 'scs_version' in params:
            header_params['SCS-Version'] = params['scs_version']

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth_2_0_client_credentials', 'oauth_2_0_authorization_code']

        return self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='BillingProfileEligibility',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'),
                                            _return_http_data_only=params.get('_return_http_data_only'))
