# coding: utf-8

"""
    Billing Profiles

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class BillingProfileEligibility(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, eligible=None, reason_code=None, reason_text=None):
        """
        BillingProfileEligibility - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'eligible': 'bool',
            'reason_code': 'str',
            'reason_text': 'str'
        }

        self.attribute_map = {
            'eligible': 'eligible',
            'reason_code': 'reasonCode',
            'reason_text': 'reasonText'
        }

        self._eligible = eligible
        self._reason_code = reason_code
        self._reason_text = reason_text

    @property
    def eligible(self):
        """
        Gets the eligible of this BillingProfileEligibility.
        True or False value to represent the eligibility of billing profile.

        :return: The eligible of this BillingProfileEligibility.
        :rtype: bool
        """
        return self._eligible

    @eligible.setter
    def eligible(self, eligible):
        """
        Sets the eligible of this BillingProfileEligibility.
        True or False value to represent the eligibility of billing profile.

        :param eligible: The eligible of this BillingProfileEligibility.
        :type: bool
        """

        self._eligible = eligible

    @property
    def reason_code(self):
        """
        Gets the reason_code of this BillingProfileEligibility.
        The code value to represent the reason why eligibility failed.

        :return: The reason_code of this BillingProfileEligibility.
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """
        Sets the reason_code of this BillingProfileEligibility.
        The code value to represent the reason why eligibility failed.

        :param reason_code: The reason_code of this BillingProfileEligibility.
        :type: str
        """

        self._reason_code = reason_code

    @property
    def reason_text(self):
        """
        Gets the reason_text of this BillingProfileEligibility.
        The text describing why the eligibility failed.

        :return: The reason_text of this BillingProfileEligibility.
        :rtype: str
        """
        return self._reason_text

    @reason_text.setter
    def reason_text(self, reason_text):
        """
        Sets the reason_text of this BillingProfileEligibility.
        The text describing why the eligibility failed.

        :param reason_text: The reason_text of this BillingProfileEligibility.
        :type: str
        """

        self._reason_text = reason_text

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
