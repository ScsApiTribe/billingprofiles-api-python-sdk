# coding: utf-8

"""
    Billing Profiles

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class BillingProfilesCollectionInnerAddresses(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, type=None, house_name=None, street=None, house_number=None, post_box=None, zip=None, city=None):
        """
        BillingProfilesCollectionInnerAddresses - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'type': 'str',
            'house_name': 'str',
            'street': 'str',
            'house_number': 'str',
            'post_box': 'str',
            'zip': 'str',
            'city': 'str'
        }

        self.attribute_map = {
            'type': 'type',
            'house_name': 'houseName',
            'street': 'street',
            'house_number': 'houseNumber',
            'post_box': 'postBox',
            'zip': 'zip',
            'city': 'city'
        }

        self._type = type
        self._house_name = house_name
        self._street = street
        self._house_number = house_number
        self._post_box = post_box
        self._zip = zip
        self._city = city

    @property
    def type(self):
        """
        Gets the type of this BillingProfilesCollectionInnerAddresses.
        The address type of the billing profile. It will either be a street address or a PO Box. A street address consists of either a houseName or a street and houseNumber. A PO Box address always defines a postBox. All addresses may contain a zip code and city.

        :return: The type of this BillingProfilesCollectionInnerAddresses.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this BillingProfilesCollectionInnerAddresses.
        The address type of the billing profile. It will either be a street address or a PO Box. A street address consists of either a houseName or a street and houseNumber. A PO Box address always defines a postBox. All addresses may contain a zip code and city.

        :param type: The type of this BillingProfilesCollectionInnerAddresses.
        :type: str
        """
        allowed_values = ["main", "bill", "correspondence", "envelope"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def house_name(self):
        """
        Gets the house_name of this BillingProfilesCollectionInnerAddresses.
        The name of the house.

        :return: The house_name of this BillingProfilesCollectionInnerAddresses.
        :rtype: str
        """
        return self._house_name

    @house_name.setter
    def house_name(self, house_name):
        """
        Sets the house_name of this BillingProfilesCollectionInnerAddresses.
        The name of the house.

        :param house_name: The house_name of this BillingProfilesCollectionInnerAddresses.
        :type: str
        """

        self._house_name = house_name

    @property
    def street(self):
        """
        Gets the street of this BillingProfilesCollectionInnerAddresses.
        The name of the street.

        :return: The street of this BillingProfilesCollectionInnerAddresses.
        :rtype: str
        """
        return self._street

    @street.setter
    def street(self, street):
        """
        Sets the street of this BillingProfilesCollectionInnerAddresses.
        The name of the street.

        :param street: The street of this BillingProfilesCollectionInnerAddresses.
        :type: str
        """

        self._street = street

    @property
    def house_number(self):
        """
        Gets the house_number of this BillingProfilesCollectionInnerAddresses.
        The house or street number.

        :return: The house_number of this BillingProfilesCollectionInnerAddresses.
        :rtype: str
        """
        return self._house_number

    @house_number.setter
    def house_number(self, house_number):
        """
        Sets the house_number of this BillingProfilesCollectionInnerAddresses.
        The house or street number.

        :param house_number: The house_number of this BillingProfilesCollectionInnerAddresses.
        :type: str
        """

        self._house_number = house_number

    @property
    def post_box(self):
        """
        Gets the post_box of this BillingProfilesCollectionInnerAddresses.
        The post office box number. If there is an empty value then the customer has a postBox but no number is indicated.

        :return: The post_box of this BillingProfilesCollectionInnerAddresses.
        :rtype: str
        """
        return self._post_box

    @post_box.setter
    def post_box(self, post_box):
        """
        Sets the post_box of this BillingProfilesCollectionInnerAddresses.
        The post office box number. If there is an empty value then the customer has a postBox but no number is indicated.

        :param post_box: The post_box of this BillingProfilesCollectionInnerAddresses.
        :type: str
        """

        self._post_box = post_box

    @property
    def zip(self):
        """
        Gets the zip of this BillingProfilesCollectionInnerAddresses.
        The Postal Code.

        :return: The zip of this BillingProfilesCollectionInnerAddresses.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """
        Sets the zip of this BillingProfilesCollectionInnerAddresses.
        The Postal Code.

        :param zip: The zip of this BillingProfilesCollectionInnerAddresses.
        :type: str
        """

        self._zip = zip

    @property
    def city(self):
        """
        Gets the city of this BillingProfilesCollectionInnerAddresses.
        The name of the city.

        :return: The city of this BillingProfilesCollectionInnerAddresses.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this BillingProfilesCollectionInnerAddresses.
        The name of the city.

        :param city: The city of this BillingProfilesCollectionInnerAddresses.
        :type: str
        """

        self._city = city

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
